//package trie;

import java.util.ArrayList;

/**
 * This class implements a Trie. 
 * 
 * @author Sesh Venugopal
 *
 */
public class Trie {
	
	// prevent instantiation
	private Trie() { }
	
	
	private static int similarUpTo(String inTrie, String insert) 
	{
		int upTo = 0;
		
		while(upTo < inTrie.length() && upTo < insert.length() && inTrie.charAt(upTo) == insert.charAt(upTo))
		{
			upTo++;
		}	
		return (upTo-1);
	}
	
	/**
	 * Builds a trie by inserting all words in the input array, one at a time,
	 * in sequence FROM FIRST TO LAST. (The sequence is IMPORTANT!)
	 * The words in the input array are all lower case.
	 * 
	 * @param allWords Input array of words (lowercase) to be inserted.
	 * @return Root of trie with all words inserted from the input array
	 */
	public static TrieNode buildTrie(String[] allWords) {
		/** COMPLETE THIS METHOD **/

		TrieNode root = new TrieNode(null, null, null);
		
		if (allWords.length == 0)
		{
			return root;
		}
		
		// Since the array is not empty, initialize first child
		root.firstChild = new TrieNode(new Indexes(0, (short) (0), (short) (allWords[0].length() - 1)), null, null);

		// Initialize pointer and lastSeen nodes
		TrieNode location = root.firstChild;
		TrieNode lastSeen = root.firstChild;
		
		int simUpTo = -1; 
		int startIndex = -1;
		int endIndex = -1;
		int wordIndex = -1;

		// Traverse through all words in array starting from second one and insert them
		for (int i = 1; i < allWords.length; i++) 
		{
			String word = allWords[i];

			// Terminate if ptr becomes null in traversal (no match case)
			while (location != null) 
			{
				startIndex = location.substr.startIndex;
				endIndex = location.substr.endIndex;
				wordIndex = location.substr.wordIndex;

				// Need to check whether startIndex < word.length()
				if (startIndex > word.length()) 
				{
					lastSeen = location;
					location = location.sibling;
					continue;
				}

				simUpTo = similarUpTo(allWords[wordIndex].substring(startIndex, endIndex + 1), word.substring(startIndex)); // Find index up to which strings are similar

				if (simUpTo != -1)
				{
					simUpTo += startIndex;
				}
				
				if (simUpTo == -1) 
				{ // No match at all
					lastSeen = location;
					location = location.sibling;
				} 
				
				else 
				{
					if (simUpTo == endIndex) 
					{ // Full match
						lastSeen = location;
						location = location.firstChild;
					} 
					
					else if (simUpTo < endIndex) 
					{ // Partial match
						lastSeen = location;
						break;
					}
				}
			}

			// We did not find a match
			if (location == null) 
			{
				Indexes indexes = new Indexes(i, (short) startIndex, (short) (word.length() - 1));
				lastSeen.sibling = new TrieNode(indexes, null, null);
			} 
			
			else 
			{
				// Otherwise we'll need to split up the current node
				Indexes currIndexes = lastSeen.substr; // Get the current indexes
				TrieNode currFirstChild = lastSeen.firstChild; // Save a reference to first child so we don't lose
																// everything under it
 
				// Update "parent" node indexes for new word indexes based on similarity
				Indexes currWordNewIndexes = new Indexes(currIndexes.wordIndex, (short) (simUpTo + 1), currIndexes.endIndex);
				currIndexes.endIndex = (short) simUpTo; // Update "parent" word last index

				// Shift everything from before down and to the right of new parent
				lastSeen.firstChild = new TrieNode(currWordNewIndexes, null, null);
				lastSeen.firstChild.firstChild = currFirstChild;
				lastSeen.firstChild.sibling = new TrieNode(new Indexes((short) i, (short) (simUpTo + 1), (short) (word.length() - 1)), null, null);
			}

			// At the very end, reset ptr and lastSeen
			location = lastSeen = root.firstChild;
			simUpTo = startIndex = endIndex = wordIndex = -1;
		}

		return root;
	}
	
	
	/**
	 * Given a trie, returns the "completion list" for a prefix, i.e. all the leaf nodes in the 
	 * trie whose words start with this prefix. 
	 * For instance, if the trie had the words "bear", "bull", "stock", and "bell",
	 * the completion list for prefix "b" would be the leaf nodes that hold "bear", "bull", and "bell"; 
	 * for prefix "be", the completion would be the leaf nodes that hold "bear" and "bell", 
	 * and for prefix "bell", completion would be the leaf node that holds "bell". 
	 * (The last example shows that an input prefix can be an entire word.) 
	 * The order of returned leaf nodes DOES NOT MATTER. So, for prefix "be",
	 * the returned list of leaf nodes can be either hold [bear,bell] or [bell,bear].
	 *
	 * @param root Root of Trie that stores all words to search on for completion lists
	 * @param allWords Array of words that have been inserted into the trie
	 * @param prefix Prefix to be completed with words in trie
	 * @return List of all leaf nodes in trie that hold words that start with the prefix, 
	 * 			order of leaf nodes does not matter.
	 *         If there is no word in the tree that has this prefix, null is returned.
	 */
	public static ArrayList<TrieNode> completionList(TrieNode root, String[] allWords, String prefix) {
		/** COMPLETE THIS METHOD **/

		if (root == null)
		{
			return null;
		}

		ArrayList<TrieNode> matches = new ArrayList<>();
		TrieNode location1 = root;

		while (location1 != null) 
		{
			// Get the substring at this node
			if (location1.substr == null)
			{
				// Possible that we're checking on root
				location1 = location1.firstChild;
			}
				
			String s = allWords[location1.substr.wordIndex];
			String a = s.substring(0, location1.substr.endIndex + 1);
			
			if (s.startsWith(prefix) || prefix.startsWith(a)) 
			{
				if (location1.firstChild != null) 
				{ 
					// this is not a full word, go to children
					matches.addAll(completionList(location1.firstChild, allWords, prefix));
					location1 = location1.sibling;
				}  
				else 
				{ 
					// Otherwise this is a full string node
					matches.add(location1);
					location1 = location1.sibling;
				}
			} 
			
			else 
			{
				location1 = location1.sibling;
			}
		}
		return matches;
	}
	
	public static void print(TrieNode root, String[] allWords) {
		System.out.println("\nTRIE\n");
		print(root, 1, allWords);
	}
	
	private static void print(TrieNode root, int indent, String[] words) {
		if (root == null) {
			return;
		}
		for (int i=0; i < indent-1; i++) {
			System.out.print("    ");
		}
		
		if (root.substr != null) {
			String pre = words[root.substr.wordIndex]
							.substring(0, root.substr.endIndex+1);
			System.out.println("      " + pre);
		}
		
		for (int i=0; i < indent-1; i++) {
			System.out.print("    ");
		}
		System.out.print(" ---");
		if (root.substr == null) {
			System.out.println("root");
		} else {
			System.out.println(root.substr);
		}
		
		for (TrieNode ptr=root.firstChild; ptr != null; ptr=ptr.sibling) {
			for (int i=0; i < indent-1; i++) {
				System.out.print("    ");
			}
			System.out.println("     |");
			print(ptr, indent+1, words);
		}
	}
 }
