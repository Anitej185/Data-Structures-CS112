
public class tesWork {

	public static void main(String[] args) 
	{
		// TODO Auto-generated method stub
		
		//question #1 (implementing queue)
		
		/*
		public void enqueue(Item item) 
		{

        Node<Item> insertion = new Node<Item>(); 
        
        insertion.data = item;

        if (isEmpty()) 
        {
            insertion.next = insertion;
            last = insertion;
        } else 
        {
            insertion.next = last.next;
            last.next = insertion; 
        }
        size += 1;
    }

    public Item dequeue() 
    {
    	if (isEmpty()) 
        {
           return null;
        }
        Item deletedData = last.next.data;

        last.next = last.next.next; 

        return deletedData;
    }
	*/
		
	//question #3.3 (counting keys; recursive BST)
		
		/*
		public static int getCount(Node node, int low, int high)
	    {
	        // Base Case
	        if(node == null)
	        {
	            return 0;
	        }
	        // If current node is in range, then 
	        // include it in count and recur for 
	        // left and right children of it
	        if(node.data >= low && node.data <= high)
	        {
	            return 1 + this.getCount(node.left, low, high)+
	                this.getCount(node.right, low, high);
	        }
	                  
	        // If current node is smaller than low, 
	        // then recur for right child
	        else if(node.data < low)
	        {
	            return this.getCount(node.right, low, high);
	        }
	          
	        // Else recur for left child
	        else
	        {
	            return this.getCount(node.left, low, high);
	        }
	    }	
	*/
	//question #5.2 (transformation)
		/*
		Node sLeft = h.left;
		Node sRight = h.right;

		Node xLeft = x.left;

		x.left = sLeft;
		x.right = sRight;

		h.left = x;
		h.right = xLeft;

		x=h;
		
		*/
	}

}
